events {}

http {
    gzip on;
    gzip_disable "msie6";
    
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 1024;
    gzip_types application/json application/javascript text/css text/html text/plain text/xml application/xml;

    # Limitação de requisições para prevenir ataques de bots
    limit_req_zone $binary_remote_addr zone=botlimit:10m rate=5r/s;

    # Limitação de conexões simultâneas por IP (adicional)
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    client_max_body_size 200M;

    server {
        listen 80;
        server_name spring.thryon.com.br;  # Seu domínio para o Spring Boot

        # Localização para /api/mobile - Ignorar verificação de referer
        location /api/mobile {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "spring.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            # Proxy pass para o Spring Boot (contêiner ou servidor)
            proxy_pass http://springboot-app:8080;  # Seu backend Spring Boot

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Passando o JWT, se o cliente estiver autenticado
            proxy_set_header Authorization $http_authorization;
        }

        # Localização para outras rotas - Com verificação de referer
        location / {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "spring.thryon.com.br") {
                return 403;
            }

            # Verifica se o referer está vindo do domínio esperado
            if ($http_referer !~* "lumos.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            # Proxy pass para o Spring Boot (contêiner ou servidor)
            proxy_pass http://springboot-app:8080;  # Seu backend Spring Boot

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Passando o JWT, se o cliente estiver autenticado
            proxy_set_header Authorization $http_authorization;
        }
    }

    server {
        listen 80;
        server_name maintenance.thryon.com.br;  # Seu domínio para o Spring Boot

        # Localização para /api/mobile - Ignorar verificação de referer
        location /api/mobile {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "maintenance.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            # Proxy pass para o Spring Boot (contêiner ou servidor)
            proxy_pass http://maintenance-service:8081;  # Seu backend Spring Boot

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Passando o JWT, se o cliente estiver autenticado
            proxy_set_header Authorization $http_authorization;
        }

        # Localização para outras rotas - Com verificação de referer
        location / {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "maintenance.thryon.com.br") {
                return 403;
            }

            # Verifica se o referer está vindo do domínio esperado
            if ($http_referer !~* "lumos.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            # Proxy pass para o Spring Boot (contêiner ou servidor)
            proxy_pass http://maintenance-service:8081;  # Seu backend Spring Boot

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Passando o JWT, se o cliente estiver autenticado
            proxy_set_header Authorization $http_authorization;
        }
    }

    server {
        listen 80;
        server_name puppeteer.thryon.com.br;  # Seu domínio para o Spring Boot

        # Localização para /api/mobile - Ignorar verificação de referer
        location /api/mobile {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "puppeteer.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            # Proxy pass para o Spring Boot (contêiner ou servidor)
            proxy_pass http://puppeteer-service:3000;  # Seu backend Spring Boot

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Passando o JWT, se o cliente estiver autenticado
            proxy_set_header Authorization $http_authorization;
        }

        # Localização para outras rotas - Com verificação de referer
        location / {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "puppeteer.thryon.com.br") {
                return 403;
            }

            # Verifica se o referer está vindo do domínio esperado
            if ($http_referer !~* "lumos.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            # Proxy pass para o Spring Boot (contêiner ou servidor)
            proxy_pass http://puppeteer-service:3000;  # Seu backend Spring Boot

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Passando o JWT, se o cliente estiver autenticado
            proxy_set_header Authorization $http_authorization;
        }
    }

    server {
        listen 80;
        server_name minio.thryon.com.br;  # Seu servidor MinIO

        location / {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "minio.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            proxy_pass http://minio:9000;  # MinIO contêiner

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }

    server {
        listen 80;
        server_name minio-console.thryon.com.br;  # Console do MinIO

        location / {
            limit_req zone=botlimit burst=10 nodelay;   # Limita as requisições por IP
            limit_conn addr 10;  # Limita as conexões simultâneas por IP

            # Verifica se o host é o correto (evita requisições para outros domínios)
            if ($host != "minio-console.thryon.com.br") {
                return 403;
            }

            # Bloqueia requisições com User-Agent vazio
            if ($http_user_agent = "") {
                return 403;
            }

            # Bloqueia User-Agents conhecidos de bots
            if ($http_user_agent ~* "Bot|Crawler|Spammer|Scraper") {
                return 403;
            }

            proxy_pass http://minio:9090;  # MinIO console contêiner

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Connection $http_connection;
            proxy_set_header Upgrade $http_upgrade;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}